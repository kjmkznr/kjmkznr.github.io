<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on ただのメモ</title>
    <link>https://kjmkznr.github.io/tags/terraform/</link>
    <description>Recent content in Terraform on ただのメモ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Dec 2015 13:00:00 +0900</lastBuildDate>
    <atom:link href="/tags/terraform/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Terraform: AWSマルチリージョンな環境を構築してみる</title>
      <link>https://kjmkznr.github.io/post/20151205/terraform-multi-region/</link>
      <pubDate>Sat, 05 Dec 2015 13:00:00 +0900</pubDate>
      
      <guid>https://kjmkznr.github.io/post/20151205/terraform-multi-region/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hashicorp&#34;&gt;HashiCorp Advent Calendar 2015&lt;/a&gt;の5日目の担当が空いていたので書いてみました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;クラウドを利用されているみなさんは、リージョン障害などに備えるために複数のリージョンを利用されているかと思います。
複数のリージョンに展開する際、どのような方法で行ってますでしょうか？&lt;/p&gt;

&lt;p&gt;CloudFormation Stackを複数のリージョンで作ったり、手動でポチポチやったり、SDKやAWSCLIを使ったスクリプトを使ったり&amp;hellip;&lt;/p&gt;

&lt;p&gt;Terraform を使えば簡単に複数のリージョンを統一的に扱うことが出来ます。&lt;/p&gt;

&lt;p&gt;Terraform は複数のプロバイダ(AWSやGCPなど)を一つのテンプレートの中に混在することが出来ます。
また、1種類のプロバイダを複数使用することも出来るため、AWSにマルチリージョンな環境を構築できます。&lt;/p&gt;

&lt;p&gt;AWS謹製のCloudFormationは、S3やRoute53などのグローバルリソースを除き、そのCloudFormation Stackを作成しているリージョンのリソースしか作成することが出来ません。
もちろん、GCPやDigitalOceanなど外部のサービスを利用することも出来ません。&lt;/p&gt;

&lt;p&gt;このあたりは Terraform の強みですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;マルチリージョン基本編&#34;&gt;マルチリージョン基本編&lt;/h2&gt;

&lt;p&gt;まずは基本的な複数のプロバイダの使い方についてです。&lt;/p&gt;

&lt;p&gt;シングルリージョンでAWSを利用する場合は以下のように記述します。
&lt;code&gt;aws_&lt;/code&gt; で始まるリソースは &lt;code&gt;aws&lt;/code&gt; プロバイダが利用されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;aws&amp;quot; {
    region = &amp;quot;ap-northeast-1&amp;quot;
}

resource &amp;quot;aws_instance&amp;quot; &amp;quot;instance-tokyo&amp;quot; {
    instance_type = &amp;quot;t2.micro&amp;quot;
    ami           = &amp;quot;ami-383c1956&amp;quot;
    tag {
        Name = &amp;quot;Tokyo Region&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;マルチリージョンで利用したい場合、&lt;code&gt;provider &amp;quot;aws&amp;quot;&lt;/code&gt; を複数書けば良いというわけではありません。
と言ってもそんなに難しいことをやるわけではなく、どちらのプロバイダを利用するのかを識別するために&lt;code&gt;alias&lt;/code&gt;を追加するだけです。&lt;/p&gt;

&lt;p&gt;あとは Resource の定義でどのプロバイダを使用するかを&lt;code&gt;provider&lt;/code&gt;で指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;aws&amp;quot; {
    region = &amp;quot;ap-northeast-1&amp;quot;
    alias = &amp;quot;tokyo&amp;quot;
}
provider &amp;quot;aws&amp;quot; {
    region = &amp;quot;ap-southeast-1&amp;quot;
    alias = &amp;quot;singapore&amp;quot;
}

resource &amp;quot;aws_instance&amp;quot; &amp;quot;instance-tokyo&amp;quot; {
    provider      = &amp;quot;aws.tokyo&amp;quot;
    instance_type = &amp;quot;t2.micro&amp;quot;
    ami           = &amp;quot;ami-383c1956&amp;quot;
    tag {
        Name = &amp;quot;Tokyo Region&amp;quot;
    }
}
resource &amp;quot;aws_instance&amp;quot; &amp;quot;instance-singapore&amp;quot; {
    provider      = &amp;quot;aws.singapore&amp;quot;
    instance_type = &amp;quot;t2.micro&amp;quot;
    ami           = &amp;quot;ami-c9b572aa&amp;quot;
    tag {
        Name = &amp;quot;Singapore Region&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;マルチリージョン応用編&#34;&gt;マルチリージョン応用編&lt;/h2&gt;

&lt;p&gt;マルチリージョンにする大きな理由として、冗長性の確保が挙げられると思います。
環境を冗長構成する場合、同じ物をスタンプのように複数のリージョンに展開していくかと思いますが、前述の方法では&lt;code&gt;provider&lt;/code&gt;と&lt;code&gt;ami&lt;/code&gt;だけが違うリソースを大量に定義していかなければならず、非常にめんどくさいですし、修正時に一部のリージョンを変更し忘れるといったオペミスも発生しやすくなります。&lt;/p&gt;

&lt;p&gt;リージョン毎に同じリソースを展開する場合、共通する部分をモジュールとしてまとめてしまうのが簡単です。&lt;/p&gt;

&lt;p&gt;今回サンプルとして作成するテンプレートのディレクトリ構成は以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./global.tf
./main.tf
./regional-resource/main.tf
./regional-resource/variables.tf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;モジュール側のリソース定義&#34;&gt;モジュール側のリソース定義&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;./regional-resource/main.tf
```
provider &amp;ldquo;aws&amp;rdquo; {
region = &amp;ldquo;${var.region}&amp;rdquo;
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;resource &amp;ldquo;aws_instance&amp;rdquo; &amp;ldquo;instance&amp;rdquo; {
    instance_type               = &amp;ldquo;t2.micro&amp;rdquo;
    ami                         = &amp;ldquo;${lookup(var.ami_id, var.region)}&amp;rdquo;
    associate_public_ip_address = true
    tag {
        Name = &amp;ldquo;${var.name}&amp;rdquo;
    }
}&lt;/p&gt;

&lt;p&gt;output &amp;ldquo;public_ip&amp;rdquo; {
    value = &amp;ldquo;${aws_instance.instance.public_ip}&amp;rdquo;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
* ./regional-resource/variables.tf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variable &amp;ldquo;region&amp;rdquo; {}
variable &amp;ldquo;name&amp;rdquo; {}
variable &amp;ldquo;ami_id&amp;rdquo; {
    default {
        ap-northeast-1  = &amp;ldquo;ami-383c1956&amp;rdquo;
        ap-southeast-1  = &amp;ldquo;ami-c9b572aa&amp;rdquo;
        ap-southeast-2  = &amp;ldquo;ami-48d38c2b&amp;rdquo;
        us-east-1       = &amp;ldquo;ami-60b6c60a&amp;rdquo;
        us-west-1       = &amp;ldquo;ami-d5ea86b5&amp;rdquo;
        us-west-2       = &amp;ldquo;ami-f0091d91&amp;rdquo;
        eu-west-1       = &amp;ldquo;ami-bff32ccc&amp;rdquo;
        eu-central-1    = &amp;ldquo;ami-bc5b48d0&amp;rdquo;
        sa-east-1       = &amp;ldquo;ami-6817af04&amp;rdquo;
    }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### モジュールを使う側のリソース定義

* ./main.tf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;module &amp;ldquo;ap-northeast-1&amp;rdquo; {
    source = &amp;ldquo;./regional-resource&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;region   = &amp;quot;ap-northeast-1&amp;quot;
name     = &amp;quot;Tokyo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
module &amp;ldquo;ap-southeast-1&amp;rdquo; {
    source = &amp;ldquo;./regional-resource&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;region   = &amp;quot;ap-southeast-1&amp;quot;
name     = &amp;quot;Singapore&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
* ./global.tf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;resource &amp;ldquo;aws_route53_zone&amp;rdquo; &amp;ldquo;primary&amp;rdquo; {
   name = &amp;ldquo;example.com&amp;rdquo;
}&lt;/p&gt;

&lt;p&gt;resource &amp;ldquo;aws_route53_record&amp;rdquo; &amp;ldquo;www&amp;rdquo; {
   zone_id = &amp;ldquo;${aws_route53_zone.primary.zone_id}&amp;rdquo;
   name = &amp;ldquo;www.example.com&amp;rdquo;
   type = &amp;ldquo;A&amp;rdquo;
   ttl = &amp;ldquo;300&amp;rdquo;
   records = [
       &amp;ldquo;${module.ap-northeast-1.public_ip}&amp;ldquo;,
       &amp;ldquo;${module.ap-southeast-1.public_ip}&amp;ldquo;,
   ]
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
`global.tf` ではRoute53にゾーンを作成し、東京都シンガポールのインスタンスのIPアドレスを登録しています。

以上のテンプレートで出来上がる構成がこんな感じです。

![multi region diagram](/images/20151205/terraform_multi-region.png)

### Provision
モジュールを使うと、単に `terraform apply` とするだけではダメで先に `terraform get` を行う必要があります。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ terraform get -update=true
$ terraform plan -module-depth=-1
$ terraform apply
```&lt;/p&gt;

&lt;p&gt;今回はローカルファイルシステムにあるモジュールを使いましたが、Gitなどからも取ってくることが出来ます。(&lt;a href=&#34;https://terraform.io/docs/modules/usage.html&#34;&gt;Using Modules&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このように、Terraformを使えば簡単にマルチリージョンな環境を手に入れることができます。
マルチリージョンどころかマルチクラウドな環境も、今回よりちょっと大変ではありますが実現できます。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
